using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using NLog;
using Marvin.JsonPatch;
using Microsoft.Extensions.Caching.Memory;
${namespaces}


namespace ${namespace}
{
    public partial class ${className}Service : BaseDomainService, I${className}Service
    {
		private static readonly ILogger _logger = LogManager.GetCurrentClassLogger();

		private readonly I${className}Repository _${classNameLower}Repository;

		public ${className}Service (I${className}Repository ${classNameLower}Repository, IMapper mapper, IMemoryCache cache) : base(mapper, cache)
        {
			_${classNameLower}Repository = ${classNameLower}Repository;
        }

		public async Task CreateAsync(${createMethodParams}, Guid? createdBy = null)
		{
			_logger.Info($"Creating ${className} with params ${createMethodParamsLogged} by {createdBy}");

			var ${classNameLower} = new ${className} 
			{
${classBody}
			};

			await _${classNameLower}Repository.CreateAsync(${classNameLower});
			
			var ${classNameLower}Dto = _mapper.Map<${className}Dto>(${classNameLower});
			_cache.SetDto(${classNameLower}Dto);
		}

		public async Task PartialUpdateAsync(Guid id, JsonPatchDocument<${className}Dto> jsonPatchUpdateDocument, Guid modifiedBy) 
		{
			_logger.Info($"Updating ${className}: {id} with document {jsonPatchUpdateDocument} by {modifiedBy} ");

            var ${classNameLower}Dto = await GetAsync(id);
            var ${classNameLower}DtoCopy = ${classNameLower}Dto.Copy();

			jsonPatchUpdateDocument.ApplyTo(${classNameLower}DtoCopy);
			var new${classNameLower} = _mapper.Map<${className}>(${classNameLower}DtoCopy);
			await _${classNameLower}Repository.UpdateAsync(new${classNameLower});

			var patchResult = new PatchResult<${className}Dto>
			{
				Old = ${classNameLower}Dto,
				Patched = ${classNameLower}DtoCopy
			};

			_cache.SetPatchResult(id, patchResult);
		}

		public async Task DeleteAsync(Guid id, Guid modifiedBy)
		{
			_logger.Info($"Deleting ${className}: {id} by {modifiedBy} ");
			await _${classNameLower}Repository.DeleteAsync(id);
		}

		public async Task<${className}Dto> GetAsync(Guid id)
		{
			var ${classNameLower} = await _${classNameLower}Repository.GetAsync(x => x.Id == id);
			return _mapper.Map<${className}Dto>(${classNameLower});
		}

		public async Task<IEnumerable<${className}Dto>> GetListAsync(IPageQuery query)
		{
			(var predicate, var navigationProperties) = NavigationFunctionHelper.CreateGeneric<${className}>(query);
            var items = await _${classNameLower}Repository.GetAllAsync(predicate, navigationProperties, query.Page, query.PageSize);
			return _mapper.Map<IEnumerable<${className}Dto>>(items);
		}


    }
}
